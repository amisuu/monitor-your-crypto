@page "/newportfolioentry/{portfolioId:int}"
@using System.ComponentModel.DataAnnotations
@using CryptoChecker.Application.Interfaces
@using CryptoChecker.Application.Services
@using System.Linq
@using static CryptoChecker.Domain.Entities.SourceModel
@using static CryptoChecker.Domain.Entities.MainEntity
@inject IPortfolioService PortfolioService
@inject IPortfolioEntryService PortfolioEntryService
@inject ICryptoStatsSource CryptoStatsSource;
@inject IMatDialogService MatDialogService
@inject IMatToaster Toaster
@inject NavigationManager NavigationManager

<div class="mat-layout-grid">
    <div class="mat-layout-grid-inner">
        <div class="mat-layout-grid-cell-span-2"></div>
        <div class="mat-layout-grid-cell-span-8">
            <MatH5><MatButton Outlined="true" Icon="keyboard_arrow_left" Style="margin-right: 1rem;" OnClick='() => { NavigationManager.NavigateTo($"/portfolios/{_portfolio.Id}"); }'>Back to portfolio</MatButton>Manage entries of <b>@_portfolio.Name</b></MatH5>
            <MatTextField Label="Filter by symbol" Style="margin-bottom: 2rem;" Icon="filter_list" FullWidth="true" @bind-Value="@CryptocurrencyFilter"></MatTextField>
            @if (_availableCryptocurrenciesWithUsage == null)
            {
                <MatProgressBar Indeterminate="true"></MatProgressBar>
            }
            else
            {
                @if (_availableCryptocurrenciesWithUsage.Count > 0)
                {
                    <MatTable Items="@_availableCryptocurrenciesWithUsage" Striped="true" RowClass="tester" PageSize="10"
                              DebounceMilliseconds="150" class="mat-elevation-z5">

                        <MatTableHeader>
                            <th>Symbol</th>
                            <th>Name</th>
                            <th></th>
                        </MatTableHeader>
                        <MatTableRow>
                            <td>@context.Item1.Symbol</td>
                            <td>
                                <div style="min-width: 12em">@context.Item1.Name</div>
                            </td>
                            @if (context.Item2)
                            {
                                <td>
                                    <MatIconButton Icon="add" Alignment OnClick="() => { OnAddCurrencyClicked(context.Item1); }" Style="float: right"></MatIconButton>
                                </td>
                            }
                            else
                            {
                                <td>
                                    <MatIconButton Icon="delete" Alignment OnClick="() => { OnDeleteCurrencyClicked(context.Item1); }" Style="float: right"></MatIconButton>
                                </td>
                            }
                        </MatTableRow>
                    </MatTable>
                }
                else
                {
                    <MatH6>No cryptocurrencies match the symbol "@CryptocurrencyFilter"</MatH6>
                }
            }
        </div>
        <div class="mat-layout-grid-cell-span-2"></div>
    </div>
</div>


@code
{
    public string CryptocurrencyFilter
    {
        get => _cryptocurrencyFilter;
        set
        {
            _cryptocurrencyFilter = value;
         
            FilterCurrenciesBySymbol(value);
            this.StateHasChanged();
        }
    }

    private void FilterCurrenciesBySymbol(string value)
    {
        _filteredCryptocurrencies = _availableCryptocurrencies.FindAll(c => c.Symbol.Contains(value));
        UpdateAvailableCryptocurrencies(_filteredCryptocurrencies);
    }

    private string _cryptocurrencyFilter;

    [Parameter]
    public int PortfolioId { get; set; }
    private Portfolio _portfolio;
    private List<PortfolioEntry> _portfolioEntries;
    private List<Cryptocurrency> _availableCryptocurrencies;
    private List<Cryptocurrency> _filteredCryptocurrencies;
    private List<Tuple<Cryptocurrency, bool>> _availableCryptocurrenciesWithUsage;

    protected override void OnInitialized()
    {
        _portfolio = PortfolioService.GetPortfolio(PortfolioId);
        
        if (_portfolio == null)
        {
            NavigationManager.NavigateTo("/notfound");
            return;
        }

        _portfolioEntries = PortfolioEntryService.GetPortfolioEntries(PortfolioId);
    }

    protected override async Task OnInitializedAsync()
    {
        _availableCryptocurrencies = (await CryptoStatsSource.GetAvailableCryptocurrencies())
            .Where(c => !c.Id.Contains("binance-peg")).ToList();
        _filteredCryptocurrencies = _availableCryptocurrencies;
        UpdateAvailableCryptocurrencies(_availableCryptocurrencies);
    }

    private void UpdateAvailableCryptocurrencies(List<Cryptocurrency> availableCryptocurrencies)
    {
        var entriesSymbols = _portfolioEntries.Select(e => e.Symbol.ToLower());

        _availableCryptocurrenciesWithUsage = availableCryptocurrencies.Select(
            c => new Tuple<Cryptocurrency, bool>(c, !entriesSymbols.Contains(c.Symbol.ToLower()))
            ).OrderBy(c => c.Item2).ThenBy(c => c.Item1.Symbol.Length).ToList();
    }

    private void OnAddCurrencyClicked(Cryptocurrency cryptocurrency)
    {
        var entry = PortfolioEntryService.CreatePortfolioEntry(cryptocurrency.Symbol, PortfolioId);
        _portfolioEntries.Add(entry);
        
        UpdateAvailableCryptocurrencies(_filteredCryptocurrencies);
        StateHasChanged();
        Toaster.Add($"{cryptocurrency.Symbol.ToUpper()} entry successfully added to {_portfolio.Name}.", MatToastType.Success, "", "");
    }

    private async void OnDeleteCurrencyClicked(Cryptocurrency cryptocurrency)
    {
        var result = await MatDialogService.ConfirmAsync($"Do you really wish to delete {cryptocurrency.Symbol.ToUpper()} entry including all of it's market entries?");
        if (result)
        {
            var entry = _portfolioEntries.Find(entry => entry.Symbol == cryptocurrency.Symbol);

            PortfolioEntryService.DeletePortfolioEntry(entry);
            _portfolioEntries.Remove(entry);
            
            UpdateAvailableCryptocurrencies(_filteredCryptocurrencies);
            StateHasChanged();
            Toaster.Add($"{cryptocurrency.Symbol.ToUpper()} entry successfully deleted from {_portfolio.Name}.", MatToastType.Success, "", "");
        }
    }
}